{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","_ref","setCategories","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","e","preventDefault","trim","length","animeList","concat","toConsumableArray","type","value","onChange","target","getGifs","asyncToGenerator","regenerator_default","mark","_callee","category","url","respuesta","_yield$respuesta$json","data","gifs","wrap","_context","prev","next","encodeURI","fetch","sent","json","map","img","_img$images","id","title","images","downsized_medium","abrupt","stop","_x","apply","this","arguments","GifGridItem","className","src","alt","GifGrid","_useFetchGifs","loading","state","setState","useEffect","then","imgs","useFetchGifs","Fragment","GifGridItem_GifGridItem","assign","key","GifExpertApp","categories","AddCategory_AddCategory","GifGrid_GifGrid","ReactDOM","render","GiftExpertApp_GifExpertApp","document","getElementById"],"mappings":"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","file":"static/js/main.4a73b5b6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    // const [inputValue, setInputValue] = useState(\"Hola mundo\")\r\n    // const [inputValue, setInputValue] = useState() //Aca el estado incial es undefine\r\n    //para evitar el undefine se debe inicializar el string en vacio\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //para prevenir el comportamiento por defecto (no recarga  pagina)\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n\r\n            setCategories( animeList => [inputValue, ...animeList]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n         <form onSubmit={handleSubmit}>\r\n\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}     \r\n                onChange={ handleInputChange}   \r\n            />   \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport  const getGifs = async(category) => {\r\n\r\n        // const url = 'https://api.giphy.com/v1/gifs/search?q=Rick+and+Morty&limit=10&api_key=WC6tP28b29A7KJ8XJWnRN7BCbu4hu5xz';\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=WC6tP28b29A7KJ8XJWnRN7BCbu4hu5xz`;\r\n        const respuesta = await fetch( url );\r\n        const {data} = await respuesta.json();\r\n  \r\n        const gifs = data.map( img => {\r\n  \r\n          return { \r\n                id: img.id,\r\n                title: img.title,\r\n                //con ? pregunta si vienen las imagenes y usa esa\r\n                url: img.images?.downsized_medium.url\r\n          }\r\n  \r\n        })\r\n  \r\n        // console.log(gifs);\r\n        return gifs;\r\n  \r\n      }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(id, title, url);\r\n  return (\r\n    <div className='card animate__animated animate__wobble'>\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n    </div>\r\n)\r\n}    ","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n\r\n  const {data:images, loading} = useFetchGifs( category);\r\n\r\n\r\n    // useEffect( () => {\r\n    //   getGifs(category)\r\n    //       .then(setImages)\r\n    //    //arreglo de dependencias (para que se dispare una sola vez)\r\n    // }, [category]) //me pide el warning que use category en dependencia aunque no se use..\r\n\r\n  // getGifs();\r\n\r\n  return ( \r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3> \r\n\r\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n\r\n      <div className='card-grid'>\r\n            {\r\n              //expresion js, se usa parentesis despues de la flecha\r\n              images.map( img => (\r\n                <GifGridItem \r\n                  key={img.id} \r\n                  {...img}\r\n                />\r\n              ))\r\n            }\r\n      </div>\r\n   </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    \r\n    //los efectos no pueden ser async\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n         \r\n            });  \r\n\r\n    }, [category]);\r\n\r\n    //el state en este caso es un objeto\r\n    return state; // {data: [] , loading: true};\r\n\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    //con esta constante es imposible cambiar o agregar cosas\r\n    //para eso se uso un hook useState\r\n    // const categories = ['One Punch', 'Saint seiya', 'Dragon ball'];\r\n\r\n    //no es buena practica mutar el arreglo con push (es const)\r\n    const [categories, setCategories] = useState(['Saint seiya']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     //2 formas de agregar un elemento al arreglo\r\n    //     //cats estado anterior, y devuelve nuevo estado mas nuevo elemento\r\n    //     setcategories( cats => [...cats, 'KanojoXkanojo']);\r\n    //     // setcategories( [...categories, 'KanojoXkanojo']);\r\n\r\n    // }; \r\n\r\n    // console.log(categories);\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} \r\n                        />\r\n                        \r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GiftExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}